# Ada Jump Start Live - Day 5 Exercises

# In one Ruby file, write code to solve the problems below. Your code should print out each problem statement, followed by the described output.

puts "1. Create an array to store 5 names. Have the user enter in the 5 names and then print out the 5 names in all UPPERCASE all on the same line. \
Note that the user may not enter all the names in uppercase.\n\n"

names = []

5.times do
  print "Please enter a name: "
  names.push(gets.chomp.upcase)
end 

puts "#{names}"
puts "\n"

puts "2. Create an array to store 3 boolean values entered in by the user. Print out YES if all the values are true and NO if at least one value is false. \
Hint: Prompt the user to enter true or false, and accept those values using gets. Since gets will give us back a string \
(instead of the boolean values we want) use if statements to convert those strings to boolean values.\n\n"

boolean_array = []

until boolean_array.size == 3
  print "Please enter true or false: "
  answer = gets.chomp.downcase

  if answer == "true"
    boolean_array.push(true)
  elsif answer == "false"
    boolean_array.push(false)
  else 
    puts "Error. Please try again. "
  end
end

if boolean_array.include?(false)
    puts "NO"
else
    puts "YES"
end

puts "\n"

puts "3. Create an array to store the following words: firetruck, fire drill, fire hydrant, firefighter, fireproof, fire station, fire hose. \
Then write code that uses the array to print out truck, drill, hydrant, fighter, proof, station, hose without modifying the array.\n\n"

my_array = ["firetruck", "fire drill", "fire hydrant", "firefighter", "fireproof", "fire station", "fire hose"]

my_array.each do |word|
  new_word = word.sub "fire", ""
  new_word.strip!
  print "#{new_word} "
end

puts "\n\nOriginal array: #{my_array}"
puts "\n"

puts "4. Create an array to store the amount of money spent on 4 people during the Holidays. Have the user enter in the amount spent on each person. \
Print the total spent on all the people. Total money spent should be displayed with a dollar sign, decimal point, and only 2 digits after the decimal.\n\n"

money_spent = []
total = 0

4.times do |i|
    print "How much money did you spend on person #{ i + 1 }?: "
    money_spent.push(gets.chomp.to_f)
end

money_spent.each do |amount|
  total += amount
end

puts "Total spent: $#{'%.2f' % total}"
puts "\n"

puts "5. Create an array to store 5 random numbers (between 1 and 10, including both 1 and 10) generated by the computer. Print out the square of each of the elements in the array.\n\n"

random_nums = []

5.times do 
  random_nums.push(rand(1..10))
end

random_nums.each do |number|
  puts "#{number}: #{number * number}"
end

puts "\n"

puts "6. Create an array to store 5000 decimal numbers. Randomly generate numbers from between 0 – 1 (including 0, but not including 1) to fill the array. Calculate and print the mean of all the elements in the array.\n\n"

float_nums = []

5000.times do 
  float_nums.push(rand())
end

mean = float_nums.sum.fdiv(float_nums.size)

puts "The mean of the array is: #{mean}"
puts "\n"

# Optional Problems
puts "1. Create an array of people that are invited to a party. Allow the user to ask if a certain person is invited to the party. If the person is on the invitation list respond INVITED otherwise respond NOT INVITED.\n\n"

invited_guests = ["June", "Emily", "Dianna", "Greg", "Heidi"]

name = ""

until name == "Q"
  print "Which name would you like to check? Type Q to quit: "
  name = gets.chomp.capitalize

  if name == "Q"
    next
  elsif invited_guests.include?(name)
    puts "INVITED"
  else
    puts "NOT INVITED"
  end
end

puts "\n"

puts "2. Have the user enter in a sentence. Then, using an array, store the frequency of each letter of the alphabet from the sentence. 
Print out the frequency of each letter. Do not count uppercase and lowercase letters differently.\n\n"

print "Please enter a sentence: "

# Count lowercase and uppercase letters the same
sentence = gets.chomp.downcase

# Keep track of the letters a-z
letter_count = Array.new(26, 0)

counter = 0

while counter < sentence.length
  letter = sentence[counter]

  # Convert to ascii
  ascii = letter.ord

  # Shift position down by 97
  shifted_index = ascii - 97

  # Increment value at shifted_index if it is a letter from a-z
  if shifted_index > -1 && shifted_index < 27
    letter_count[shifted_index] += 1
  end

  counter += 1
end

# Print the frequency of each letter
letter_count.each_with_index do |count, index|
  if count > 0
    # Shift position up by 97
    ascii = index + 97
    puts "#{ascii.chr}: #{count}"
  end
end

puts "\n"

puts "3. Create an array of size 8. Fill the array randomly with 0’s and 1’s. Print out the array so that it appears as a binary number. 
Calculate and print out the decimal value of that binary number."

binary_array = Array.new

8.times do 
  binary_array.push(rand(2))
end

binary_num = binary_array.join()
puts binary_num

counter = -1
total = 0

binary_array.size.times do |i|
  number = binary_array[counter]
  if number == 1
    total += 2 ** i
  end

  counter -= 1
end

puts total
